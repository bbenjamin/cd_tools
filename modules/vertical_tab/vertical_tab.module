<?php

/**
 * @file
 * Contains code for Vertical Tab module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;

/**
 * Implements hook_themes_installed().
 */
function vertical_tab_themes_installed($theme_list) {
  if (\Drupal::service('plugin.manager.block')->hasDefinition('system_powered_by_block')) {
    $block_values_default = [
      'plugin' => 'system_powered_by_block',
      'region' => 'content',
      'visibility' => [
        'request_path' => [
          'id' => 'request_path',
          'pages' => "/filter/tips\r\n/filter/tips/*",
          'negate' => TRUE,
          'context_mapping' => [],
        ],
      ],
      'status' => 0,
      'weight' => 100,
      'settings' => [
        'id' => 'system_powered_by_block',
        'label' => 'Vertical Tab test block',
      ],
    ];

    foreach ($theme_list as $theme_name) {
      $values = $block_values_default + [
        'id' => $theme_name . '_vertical_tab_test',
        'theme' => $theme_name,
      ];

      try {
        $block = Block::create($values);
        $block->save();
      }
      catch (\Exception $e) {
      }
    }
  }
}

/**
 * Implements hook_toolbar().
 */
function vertical_tab_toolbar() {
  $theme_settings = \Drupal::config('system.theme');
  $admin_theme = !empty($theme_settings->get('admin'))
    ? $theme_settings->get('admin')
    : $theme_settings->get('default');

  $items['vertical_tab'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Vertical Tab'),
      '#url' => Url::fromRoute('entity.block.edit_form', [
        'block' => $admin_theme . '_vertical_tab_test',
      ], [
        'attributes' => [
          'class' => [
            'js--vertical_tab-test-link',
            'js--vertical_tab-test-link--toolbar',
          ],
        ],
      ]),
    ],
    '#weight' => 121,
  ];

  return $items;
}

/**
 * Implements hook_form_alter() for all forms.
 */
function vertical_tab_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_permission_map = _vertical_tab_unsafe_forms();

  if (!in_array($form_id, array_keys($form_permission_map))) {
    return;
  }

  $current_user = \Drupal::currentUser();
  if (
    !empty($form_permission_map[$form_id]) &&
    !$current_user->hasPermission($form_permission_map[$form_id])
  ) {
    $form['#validate'] = $form['#validate'] ?? [];
    array_unshift($form['#validate'], '_vertical_tab_form_validate');

    foreach (Element::children($form['actions']) as $id) {
      $form['actions'][$id]['#validate'] = $form['actions'][$id]['#validate'] ?? [];
      array_unshift($form['actions'][$id]['#validate'], '_vertical_tab_form_validate');
    }
  }
}

/**
 * Validate handler to get back some (false?) sense of security.
 */
function _vertical_tab_form_validate(&$form, FormStateInterface $form_state) {
  $form_state->setErrorByName('__none__', t('Permission denied.'));
}

/**
 * Returns runied form's id with the original required route perm.
 *
 * Some form's original route permission requirement is ruined by us.
 * To keep the test module's changes safe as much as possible, we'll check in a
 * custom form validation handler that the current user has the original
 * permission.
 */
function _vertical_tab_unsafe_forms() {
  return [
    'block_form' => 'administer blocks',
  ];
}
